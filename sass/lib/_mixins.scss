//start my mixins
@mixin povh($povh) {
position: relative;
overflow: hidden;
}
//buttons and inputs

@mixin button($button){
  @include button_gradient('');
  -webkit-border-radius: 28;
  -moz-border-radius: 28;
  border-radius: 28px;
  font-family: $ffamily;
  color: #ffffff;
  font-size: 20px;
  padding: 10px 20px 10px 20px;
  text-decoration: none;
  border: none;
}
@mixin button_gradient($button_gradient){
  background: #3498db;
  background-image: -webkit-linear-gradient(top, #3498db, #2980b9);
  background-image: -moz-linear-gradient(top, #3498db, #2980b9);
  background-image: -ms-linear-gradient(top, #3498db, #2980b9);
  background-image: -o-linear-gradient(top, #3498db, #2980b9);
  background-image: linear-gradient(to bottom, #3498db, #2980b9);
}
@mixin button_gradient_hover($button_gradient_hover){
  background: #3cb0fd;
  background-image: -webkit-linear-gradient(top, #3cb0fd, #3498db);
  background-image: -moz-linear-gradient(top, #3cb0fd, #3498db);
  background-image: -ms-linear-gradient(top, #3cb0fd, #3498db);
  background-image: -o-linear-gradient(top, #3cb0fd, #3498db);
  background-image: linear-gradient(to bottom, #3cb0fd, #3498db);
}

@mixin input($input){
  width: 300px;
  height: 25px;
  box-sizing: border-box;
  padding: 0 5px;
  color: #000;
  font-size: 14px;
  font-family: $ffamily;
  border: 1px solid #000;
  border-radius: 3px;
}
@mixin input_focus($input_focus){
  box-shadow: 0 0 2px #99e6f9;
}
//end buttons and inputs

//page colors
$main_color: #fff;
$second_color: #000;
$gradient: linear-gradient(to right, #d22beb 0%, #d22beb 0%, #1a94f2 100%);
//end page colors

$white: #fff;
$black: #000;
$fsize: 14px;
$ffamily:  'Arial';

//custom font family
$fontfamily:  'Clear Sans';
$bold:  'Clear Sans Bold';
$italic: 'Clear Sans Italic';
$light: 'Clear Sans Light';
$thin: 'Clear Sans Thin';
$mediumitalic:  'Clear Sans MediumItalic';
$bolditalic:  'Clear Sans BoldItalic';
$medium:  'Clear Sans Medium';
//end custom font family

$left: left;
$right: right;

//end my mixins


// responsive example, edit or remove
$breaksmall: 500px;

$breaklarge: 1180px;

@mixin r($media) {
  @if $media == pda {
    // narrower than $width
    @media only screen and (max-width: $breaksmall) {
      @content;
    }
  }
  @else if $media == wide {
    // wider than $width
    @media only screen and (min-width: $breaklarge) {
      @content;
    }
  }
}

@mixin fs($sizeValue: 16) {
  font-size: $sizeValue + px;
  font-size: $sizeValue / 10 + rem;
}

@mixin text-overflow {
  overflow: hidden;
  -ms-text-overflow: ellipsis;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin cover {
  background-repeat: no-repeat;
  background-size: cover;
  background-position: 50% 50%;
}

// retina bg
@mixin retina {
  @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2) {
    @content;
  }
}

@mixin box {
  @include box-sizing(border-box);
}

//simple gradient
@mixin g($color1, $color2) {
  @include background-image(linear-gradient($color1, $color2));
}

@mixin gh($color1, $color2) {
  @include background-image(linear-gradient(left, $color1, $color2));
}

//asdfast font-family
@mixin font($alias, $name) {
  @font-face {
    font-family: $alias;
    src: url("fonts/" + $name + ".eot");
    src: url("fonts/" + $name + ".eot?#iefix") format("embedded-opentype"), url("fonts/" + $name + ".woff") format("woff"), url("fonts/" + $name + ".ttf") format("truetype");
    font-weight: normal;
    font-style: normal;
  }
}

//+font(black, cytiapro-black-webfont)

// ROTATE
@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
  -moz-transform: rotate($deg + deg);
  -o-transform: rotate($deg + deg);
  -webkit-transform: rotate($deg + deg);
  -ms-transform: rotate($deg + deg);
  transform: rotate($deg + deg);
  filter: progid:DXImageTransform.Microsoft.Matrix(M11=$m11, M12=$m12,M21=$m21, M22=$m22, sizingMethod='auto expand');
  zoom: 1;
}

// TRANSITION
@mixin transition($what) {
  -moz-transition: $what;
  -o-transition: $what;
  -webkit-transition: $what;
  -ms-transition: $what;
  transition: $what;
}

@mixin tr($what) {
  @include transition($what);
}

@mixin hide-text {
  font: 0 / 0 a;
  text-shadow: none;
  color: transparent;
}

@mixin hidetext {
  @include hide-text;
}

@mixin clr {
  &:after {
    content: " ";
    display: table;
    clear: both;
  }
  *zoom: 1;
}

@mixin placeholder-color($color) {
  &:-moz-placeholder {
    color: $color;
  }
  &::-webkit-input-placeholder {
    color: $color;
  }
}

@mixin placeholder {
  &:-ms-input-placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &::-webkit-input-placeholder {
    @content;
  }
  &::placeholder {
    @content;
  }
}

@mixin gray {
  filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='matrix' values='0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0'/></filter></svg>#grayscale");
  // Firefox 10+
  filter: gray;
  // IE6-9
  -webkit-filter: grayscale(100%);
  // Chrome 19+ & Safari 6+
  filter: progid:DXImageTransform.Microsoft.BasicImage(grayScale=1);
  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(grayScale=1)";
}

@mixin gray-half {
  filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='saturate' values='0.5'/></filter></svg>#grayscale");
  // Firefox 10+
  filter: gray alpha(opacity = 50);
  // IE6-9
  -webkit-filter: grayscale(50%);
  // Chrome 19+ & Safari 6+
}

@mixin gray-zero {
  filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='matrix' values='1 0 0 0 0, 0 1 0 0 0, 0 0 1 0 0, 0 0 0 1 0'/></filter></svg>#grayscale");
  -webkit-filter: grayscale(0%);
}

@mixin unselectable {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

@mixin nosel {
  @include unselectable;
}

@mixin prevent-text {
  -ms-word-break: break-all;
  word-break: break-all;
  word-break: break-word;
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  hyphens: auto;
}

@mixin font-smoothing($val: antialiased) {
  -webkit-font-smoothing: $val;
  -moz-font-smoothing: $val;
  -ms-font-smoothing: $val;
  -o-font-smoothing: $val;
}

@mixin selection {
  & ::selection {
    @content;
  }
  & ::-moz-selection {
    @content;
  }
}

@mixin sel {
  @include selection;
}

@mixin gpu {
  @include transform(translate3d(0, 0, 0));
}

@mixin smooth-triangle {
  -webkit-transform: rotate(0.05deg);
  -moz-transform: scale(1.1);
  -o-transform: rotate(0.05deg);
  transform: rotate(0.05deg);
}

@mixin scrollbar {
  & ::-moz-scrollbar {
    @content;
  }
  & ::-webkit-scrollbar {
    @content;
  }
  & ::scrollbar {
    @content;
  }
}

@mixin scrollbar-track {
  & ::-moz-scrollbar-track {
    @content;
  }
  & ::-webkit-scrollbar-track {
    @content;
  }
  & ::scrollbar-track {
    @content;
  }
}

@mixin scrollbar-thumb {
  & ::-moz-scrollbar-thumb {
    @content;
  }
  & ::-webkit-scrollbar-thumb {
    @content;
  }
  & ::scrollbar-thumb {
    @content;
  }
}

@mixin scrollbar-track-piece {
  & ::-moz-scrollbar-track-piece {
    @content;
  }
  & ::-webkit-scrollbar-track-piece {
    @content;
  }
  & ::scrollbar-track-piece {
    @content;
  }
}

//triangle
@mixin arr($width, $height, $bg, $direction) {
  width: 0px;
  height: 0px;
  border-style: solid;
  @if $direction == t {
    border-width: 0 $width / 2 + px $height + px $width / 2 + px;
    border-color: transparent transparent $bg transparent;
  }
  @if $direction == r {
    border-width: $height / 2 + px 0 $height / 2 + px $width + px;
    border-color: transparent transparent transparent $bg;
  }
  @if $direction == b {
    border-width: $height + px $width / 2 + px 0 $width / 2 + px;
    border-color: $bg transparent transparent transparent;
  }
  @if $direction == l {
    border-width: $height / 2 + px $width + px $height / 2 + px 0;
    border-color: transparent $bg transparent transparent;
  }
  @if $direction == tl {
    border-width: $height + px $width + px 0 0;
    border-color: $bg transparent transparent transparent;
  }
  @if $direction == tr {
    border-width: 0 $width + px $height + px 0;
    border-color: transparent $bg transparent transparent;
  }
  @if $direction == br {
    border-width: 0 0 $height + px $width + px;
    border-color: transparent transparent $bg transparent;
  }
  @if $direction == bl {
    border-width: $width + px 0 0 $height + px;
    border-color: transparent transparent transparent $bg;
  }
}

// example
// +arr(500,50, #000, l)
// +arr(500,50, #000, bl)
